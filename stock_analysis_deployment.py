# -*- coding: utf-8 -*-
"""Stock analysis deployment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JF_CMbpLZUWyxScOJ1eRTkfABW-E4rpi
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from statsmodels.tsa.arima.model import ARIMA

from statsmodels.stats.outliers_influence import variance_inflation_factor

#pip install pmdarima

from pmdarima import auto_arima

#pip install streamlit

import streamlit as st

# Load data
df = pd.read_csv("AAPL.csv")
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

# Feature Engineering
df['MA5'] = df['Close'].rolling(window=5).mean()
df['MA10'] = df['Close'].rolling(window=10).mean()
df['Daily_Return'] = df['Close'].pct_change()
df['Volatility'] = df['Daily_Return'].rolling(window=20).std()
df['Close_Lag1'] = df['Close'].shift(1)
df.dropna(inplace=True)

# Split into train and test (last year as test)
train_df = df[:'2018-12-31']
test_df = df['2019-01-01':]

# Scaling
scaler = StandardScaler()
numerical_cols = ['Open', 'High', 'Low', 'MA5', 'MA10', 'Volume', 'Close_Lag1', 'Close']
train_scaled = scaler.fit_transform(train_df[numerical_cols])
test_scaled = scaler.transform(test_df[numerical_cols])

train_scaled_df = pd.DataFrame(train_scaled, index=train_df.index, columns=numerical_cols)
test_scaled_df = pd.DataFrame(test_scaled, index=test_df.index, columns=numerical_cols)

# VIF Check
X_vif = train_scaled_df[['Open', 'High', 'Low', 'MA5', 'MA10', 'Volume', 'Close_Lag1']]
vif = pd.DataFrame()
vif["variables"] = X_vif.columns
vif["VIF"] = [variance_inflation_factor(X_vif.values, i) for i in range(X_vif.shape[1])]

import warnings
# Suppress specific FutureWarning related to 'force_all_finite'
warnings.filterwarnings("ignore", category=FutureWarning, message="'force_all_finite' was renamed to 'ensure_all_finite'")

# ARIMA 30 day forecast
forecast_periods = 30
arima_model = auto_arima(train_df['Close'], seasonal=True, m=7, suppress_warnings=True, stepwise=True, trace=False)
arima_predictions = arima_model.predict(n_periods=forecast_periods)

last_date = train_df.index[-1]
# Corrected date range creation
forecast_index = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=forecast_periods)
arima_predictions_series = pd.Series(arima_predictions, index=forecast_index)

# Linear Regression
X_train_lr = train_scaled_df[['Open', 'High', 'Low', 'MA5', 'MA10', 'Volume', 'Close_Lag1']]
y_train_lr = train_scaled_df['Close']
X_test_lr = test_scaled_df[['Open', 'High', 'Low', 'MA5', 'MA10', 'Volume', 'Close_Lag1']]
y_test_lr = test_scaled_df['Close']

model_lr = LinearRegression()
model_lr.fit(X_train_lr, y_train_lr)
predictions_lr = model_lr.predict(X_test_lr)
rmse_lr = np.sqrt(mean_squared_error(y_test_lr, predictions_lr))

# Streamlit App
import warnings

# Suppress the specific warning
warnings.filterwarnings("ignore", message="missing ScriptRunContext")
st.title("Apple Stock Price Prediction")

# Plots
st.subheader("Stock Price and Moving Averages")
fig1, ax1 = plt.subplots(figsize=(12, 6))
ax1.plot(df['Close'], label='Closing Price')
ax1.plot(df['MA5'], label='5-Day MA')
ax1.plot(df['MA10'], label='10-Day MA')
ax1.legend()
ax1.set_xlabel("Date")
ax1.set_ylabel("Price")
ax1.grid(True)
st.pyplot(fig1)

st.subheader("Distribution of Daily Returns")
fig2, ax2 = plt.subplots()
sns.histplot(df['Daily_Return'], ax=ax2)
st.pyplot(fig2)

st.subheader("Boxplot by Year")
fig3, ax3 = plt.subplots()
df['Year'] = df.index.year
sns.boxplot(x='Year', y='Close', data=df, ax=ax3)
st.pyplot(fig3)

st.subheader("VIF Values")
st.write(vif)

st.subheader("Linear Regression Results")
st.write(f"RMSE: {rmse_lr}")

st.subheader("ARIMA 30 Day Forecast")
st.write(arima_predictions_series)

st.subheader("ARIMA 30 Day Forecast Plot")
fig5, ax5 = plt.subplots(figsize=(12, 6))
ax5.plot(train_df.index[-100:], train_df['Close'][-100:], label='Training Data (Last 100 days)')
ax5.plot(arima_predictions_series.index, arima_predictions_series, label='30 Day Forecast', color='red')
ax5.legend()
st.pyplot(fig5)

#Trend Analysis.
st.subheader("Trend Analysis")
st.write("Visual inspection of the moving average plot above, and the ARIMA predicted vs actual plot, will give a good idea of trends. For short term trends, pay attention to the 5 day moving average, and for long term trends, the 10 day moving average.")
st.write("Also, the ARIMA prediction plot shows the models ability to follow the general trend of the stock price.")

#External Factors.
st.subheader("External Factors")
st.write("To understand external factors, you would need to perform additional analysis. This could include:")
st.write("- News sentiment analysis")
st.write("- Economic data correlation")
st.write("- Event studies of major Apple events (product launches, earnings reports, etc.)")

# Add a download button for the ARIMA forecast
def convert_df(df):
    return df.to_csv().encode('utf-8')

csv = convert_df(arima_predictions_series.to_frame())

st.download_button(
    label="Download ARIMA 30 Day Forecast as CSV",
    data=csv,
    file_name='arima_30day_forecast.csv',
    mime='text/csv',
)